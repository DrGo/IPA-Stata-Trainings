{smcl}
{txt}{...}
{pstd}{c TLC}{hline 43}{c TRC}{break}
{bf}{...}
{c |}{view `""Stata 103.smcl""': Innovations for Poverty Action{space 12}}{c |}{break}
{c |}{view `""Stata 103.smcl""': The Abdul Latif Jameel Poverty Action Lab{space 1}}{c |}{break}
{c |}{view `""Stata 103.smcl""':{space 43}}{c |}{break}
{c |}{view `""Stata 103.smcl""': Staff Training{space 28}}{c |}{break}
{c |}{view `""Stata 103.smcl""': Stata 103{space 33}}{c |}{break}
{sf}{...}
{c BLC}{hline 43}{c BRC}

{pstd}{bf:For-Loops and Macros}{break}

{pstd}{bf:{stata `"use "Raw/Stata 103", clear"'}}{p_end}

{pstd}{view `""SMCL/Concepts/For-Loops and Macros.smcl"##introduction"':1. Variants on foreach}{break}
{view `""SMCL/Concepts/For-Loops and Macros.smcl"##tracing"':2. Tracing}{break}
{view `""SMCL/Concepts/For-Loops and Macros.smcl"##macros"':3. More on Macros}{break}
{view `""SMCL/Concepts/For-Loops and Macros.smcl"##loops"':4. More Loops}

{hline}{marker variants}

{pstd}{bf:1. Variants on foreach}

{hline}

{pstd}In {bf:Stata 102}, we introduced the {bf:foreach in} loop, which you
should be familiar with. A simple example:

{p2colset 5 84 0 0}{...}
{pstd}{c TLC}{hline 78}{c TRC}{p_end}
{p2col:{c |} {it:It's the first time!} {bf:Try it yourself.}}{c |}{p_end}
{pstd}{c BLC}{hline 78}{c BRC}{p_end}
{p2colreset}{...}
{pstd}{...}{cmd}
foreach x in a b c {{break}
{p_end}{pmore}display "`x'"{break}{p_end}{pstd}
}
{txt}{sf}{ul off}{...}

{pstd}In the above loop, each item following "in" is substituted into the macro `x'.
However, there are several very useful variants on this syntax, used
when dealing with lists of variables or numbers.

{hline}{marker varlist}

{pstd}Say we want to run a loop for 20 variables, all listed consecutively (var1, var2, ... var20).
If you used {bf:foreach in}, you would have to list them all manually.
However, when using {bf:foreach of varlist}, you can simply tell Stata
to use the 1st through 20th variables, only listing those two with a dash in between.
Thus, this code would tabulate all twenty variables:

{pstd}{cmd}{...}
foreach i of varlist var1-var20 {{break}
{p_end}{pmore}tabulate `i'{break}{p_end}{pstd}
}
{txt}{sf}{ul off}{...}

{pstd}If you had tried using this shorthand with {cmd:foreach in}
Stata would get confused and would try to look for a variable that was named "var1-var20",
and would just tell you the loop is impossible to run because that variable doesn’t exist.

{pstd}Here's another very useful example. Compare the output of:

{pstd}{cmd}foreach var of varlist _all {{txt}{p_end}
{pmore}{cmd}display "`var'"{txt}{p_end}
{pstd}{cmd}}{txt}{p_end}

{pstd}{stata `"run "Do/Concepts/For-Loops and Macros.do" 1"':Click here to execute.}

{pstd}and:

{pstd}{cmd}foreach var in _all {{txt}{p_end}
{pmore}{cmd}display "`var'"{txt}{p_end}
{pstd}{cmd}}{txt}{p_end}

{pstd}{stata `"run "Do/Concepts/For-Loops and Macros.do" 2"':Click here to execute.}

{pstd}Note that there are many ways to specify a list of variables in Stata. See
this very useful {helpb varlist:help file} for more. In particular, notice
the use of special characters such as "*" to indicate a certain subset
of variables. Can you think of a time when you might use them?

{hline}{marker numlist}

{pstd}When we want to loop over a list of numbers, {cmd:foreach of numlist} is a great
shorthand.

{pstd}Let's look at the following loop:

{p2colset 5 84 0 0}{...}
{pstd}{c TLC}{hline 78}{c TRC}{p_end}
{p2col:{c |} {it:It's the first time!} {bf:Try it yourself.}}{c |}{p_end}
{pstd}{c BLC}{hline 78}{c BRC}{p_end}
{p2colreset}{...}
{pstd}{...}{cmd}
foreach i of numlist 1/10 {{break}
{p_end}{pmore}display "`i'"{break}{p_end}{pstd}
}
{txt}{sf}{ul off}{...}

{pstd}A numlist ("number list") is a list of numbers specified in shorthand.
The shorthand used above is the one you'll see most frequently.
The / symbol means "to" so 1/10 means 1 to 10:{space 2}1/10 is shorthand for 1 2 3 4 5 6 7 8 9 10.
Another useful shorthand allows you to move from one number to another in steps of a third number.
Multiples of a number follow this pattern. For example:

{pstd}{cmd}foreach i of numlist 10(5)50 {{txt}{p_end}
{pmore}{cmd}display "`i'"{txt}{p_end}
{pstd}{cmd}}{txt}{p_end}

{pstd}{stata `"run "Do/Concepts/For-Loops and Macros.do" 3"':Click here to execute.}

{pstd}#1(#d)#2 means "#1 to #2 in steps of #d". Thus, 10(5)50 means 10 to 50 in steps of 5,
in other words, all the multiples of 5 between 10 and 50, inclusive.
These aren't all the numlist shortcuts: see the {help numlist:help file} for more.

{hline}

{pstd}{bf:Note:} Almost all Stata users will at some point get mixed up between {bf:in} and {bf:of}
when using the {cmd:foreach} command. Remember that when using {bf:in}, you must spell
out all of the items that will be pasted into the resulting macro. Using {bf:of},
when combined with {bf:varlist} or {bf:numlist}, allows you to use some shorthand
specifically when the items that you want to loop through are either all variables
or all numbers.

{pstd}Note how the output of the following two loops are the same:

{pstd}{cmd}foreach num in 1 2 3 4 5 {{txt}{p_end}
{pmore}{cmd}display "`num'"{txt}{p_end}
{pstd}{cmd}}{txt}{p_end}

{pstd}{stata `"run "Do/Concepts/For-Loops and Macros.do" 4"':Click here to execute.}

{pstd}{cmd}foreach num of numlist 1/5 {{txt}{p_end}
{pmore}{cmd}display "`num'"{txt}{p_end}
{pstd}{cmd}}{txt}{p_end}

{pstd}{stata `"run "Do/Concepts/For-Loops and Macros.do" 5"':Click here to execute.}

{hline}{marker tracing}

{pstd}{bf:2. Tracing}

{hline}

{pstd}Loops can be confusing, and they're also difficult to debug,
because for a loop that results in an error,
Stata doesn't clearly indicate which command in the loop is causing the problem.
For example, here's a loop with a bug introduced:

{pstd}{cmd}foreach var in sex age educ {{txt}{p_end}
{pmore}{cmd}display "Checking `var' for missing values..."{txt}{p_end}
{pmore}{cmd}list hhid `var' if `var == .{txt}{p_end}
{pstd}{cmd}}{txt}{p_end}

{pstd}{stata `"run "Do/Concepts/For-Loops and Macros.do" 6"':Click here to execute.}

{pstd}To get around this, you can turn on {help trace:tracing}:

{p2colset 5 84 0 0}{...}
{pstd}{c TLC}{hline 78}{c TRC}{p_end}
{p2col:{c |} {it:It's the first time!} {bf:Try it yourself.}}{c |}{p_end}
{pstd}{c BLC}{hline 78}{c BRC}{p_end}
{p2colreset}{...}
{pstd}{...}{cmd}
set trace on
{txt}{sf}{ul off}{...}

{pstd}This gives details about the commands Stata is executing:

{pstd}{cmd}foreach var in sex age educ {{txt}{p_end}
{pmore}{cmd}display "Checking `var' for missing values..."{txt}{p_end}
{pmore}{cmd}list hhid `var' if `var == .{txt}{p_end}
{pstd}{cmd}}{txt}{p_end}

{pstd}{stata `"run "Do/Concepts/For-Loops and Macros.do" 7"':Click here to execute.}

{pstd}Once you've identified the problem:

{p2colset 5 84 0 0}{...}
{pstd}{c TLC}{hline 78}{c TRC}{p_end}
{p2col:{c |} {it:It's the first time!} {bf:Try it yourself.}}{c |}{p_end}
{pstd}{c BLC}{hline 78}{c BRC}{p_end}
{p2colreset}{...}
{pstd}{...}{cmd}
set trace off
{txt}{sf}{ul off}{...}

{pstd}Notice the behavior of {cmd:set trace on} with macros:

{pstd}{bf:{stata `"set trace on"'}}{p_end}

{pstd}{cmd}foreach var in sex age educ {{txt}{p_end}
{pmore}{cmd}display "Checking `var' for missing values..."{txt}{p_end}
{pmore}{cmd}list hhid `var' if `var' == .{txt}{p_end}
{pstd}{cmd}}{txt}{p_end}

{pstd}{stata `"run "Do/Concepts/For-Loops and Macros.do" 8"':Click here to execute.}

{pstd}{bf:{stata `"set trace off"'}}{p_end}

{pstd}{cmd:set trace on} first shows the commands as they were originally typed,
before the values of macros are substituted.
It then shows the commands
after the macros have been "expanded."
Here, we see:

{pstd}- foreach var in sex age educ {{break}
- display "Checking `var' for missing values..."{break}
= display "Checking sex for missing values..."{break}
Checking sex for missing values...{break}
- list hhid `var' if `var' == .{break}
= list hhid sex if sex == .{break}
- }

{pstd}First, we see the command as it was first typed:

{pstd}- display "Checking `var' for missing values..."

{pstd}Then the command after the macro expansion:

{pstd}= display "Checking sex for missing values..."{break}

{pstd}Then the result:

{pstd}Checking sex for missing values...

{hline}{marker macros}

{pstd}{bf:3. More on Macros}

{hline}

{pstd}A few more points about macros.

{pstd}Local macros don't exist after the do-file ends.
For example, copy these commands to a new do-file, then run it:

{pstd}{cmd}{...}
local x Hello world{break}
display "`x'"
{txt}{sf}{ul off}{...}

{pstd}Now try the following command:

{pstd}{bf:{stata `"display "`x'""'}}{p_end}

{pstd}It doesn't work, because the local doesn't exist now that the do-file is done.

{pstd}We will now briefly discuss global macros.
Basically, they're like local macros
except they stick around even after the do-file ends,
so they can be used in the Command window afterwards
or by other do-files.
Rather than being enclosed by ` and ', they
start with {cmd:$}.
Copy these commands to a new do-file, then run it:

{pstd}{cmd}{...}
global x Hello world{break}
display "$x"
{txt}{sf}{ul off}{...}

{pstd}Now try the following command:

{pstd}{bf:{stata `"display "$x""'}}{p_end}

{pstd}It works!

{p2colset 5 84 0 0}{...}
{pstd}{c TLC}{hline 78}{c TRC}{p_end}
{p2col:{c |} {it:Technical Tip!}}{c |}{p_end}
{pstd}{c LT}{hline 78}{c RT}{p_end}
{p2col:{c |} I defined {cmd:`x'} as follows:}{c |}{p_end}
{p2col:{c |} }{c |}{p_end}
{p2col:{c |} {cmd:local x Hello world}}{c |}{p_end}
{p2col:{c |} }{c |}{p_end}
{p2col:{c |} But I also could have coded:}{c |}{p_end}
{p2col:{c |} }{c |}{p_end}
{p2col:{c |} {cmd:local x "Hello world"}}{c |}{p_end}
{p2col:{c |} }{c |}{p_end}
{p2col:{c |} Here, I enclosed the value of {cmd:`x'} with double quotes. Usually, these quotes}{c |}{p_end}
{p2col:{c |} are not required. For example, they were not needed here. However, they are}{c |}{p_end}
{p2col:{c |} always allowed. The only times they are necessary are when the value of the}{c |}{p_end}
{p2col:{c |} macro begins with double quotes or a macro operator, such as {cmd:=}, or when it}{c |}{p_end}
{p2col:{c |} contains leading leading or trailing spaces. Let's look at an example where}{c |}{p_end}
{p2col:{c |} the quotes are necessary.}{c |}{p_end}
{p2col:{c |} }{c |}{p_end}
{cmd}{...}
{p2col:{c |} foreach x in "Hello world" "a" "b" "c" {c -(}}{c |}{p_end}
{p2col:{c |}{space 5}display "`x'"}{c |}{p_end}
{p2col:{c |} {c )-}}{c |}{p_end}
{txt}{sf}{ul off}{...}
{p2col:{c |} }{c |}{p_end}
{p2col:{c |} {stata `"run "Do/Text boxes.do" "for-loops and macros" 1"':Click here to execute.}}{c |}{p_end}
{p2col:{c |} }{c |}{p_end}
{p2col:{c |} The loop above {cmd:display}ed the four string values that followed {cmd:foreach in}.}{c |}{p_end}
{p2col:{c |} Let's examine a variation on this loop:}{c |}{p_end}
{p2col:{c |} }{c |}{p_end}
{cmd}{...}
{p2col:{c |} local list ""Hello world" "a" "b" "c""}{c |}{p_end}
{p2col:{c |} foreach x in `list' {c -(}}{c |}{p_end}
{p2col:{c |}{space 5}display "`x'"}{c |}{p_end}
{p2col:{c |} {c )-}}{c |}{p_end}
{txt}{sf}{ul off}{...}
{p2col:{c |} }{c |}{p_end}
{p2col:{c |} {stata `"run "Do/Text boxes.do" "for-loops and macros" 2"':Click here to execute.}}{c |}{p_end}
{p2col:{c |} }{c |}{p_end}
{p2col:{c |} We see the same output. In the definition of {cmd:`list'}, we used enclosing}{c |}{p_end}
{p2col:{c |} double quotes. Here is what would have happened if we hadn't:}{c |}{p_end}
{p2col:{c |} }{c |}{p_end}
{cmd}{...}
{p2col:{c |} local list "Hello world" "a" "b" "c"}{c |}{p_end}
{p2col:{c |} foreach x in `list' {c -(}}{c |}{p_end}
{p2col:{c |}{space 5}display "`x'"}{c |}{p_end}
{p2col:{c |} {c )-}}{c |}{p_end}
{txt}{sf}{ul off}{...}
{p2col:{c |} }{c |}{p_end}
{p2col:{c |} {stata `"run "Do/Text boxes.do" "for-loops and macros" 3"':Click here to execute.}}{c |}{p_end}
{p2col:{c |} }{c |}{p_end}
{p2col:{c |} Do you notice the difference in output? {cmd:macro list}, which shows the values}{c |}{p_end}
{p2col:{c |} of macros, is one way to see it. Here, {cmd:`list1'} is the list with the extra}{c |}{p_end}
{p2col:{c |} set of double quotes, and {cmd:`list2'} is the list without it:}{c |}{p_end}
{p2col:{c |} }{c |}{p_end}
{p2col:{c |} {bf:{stata local list1 ""Hello world" "1" "2" "3" "a" "b" "c""}}}{c |}{p_end}
{p2col:{c |} {bf:{stata local list2 "Hello world" "1" "2" "3" "a" "b" "c"}}}{c |}{p_end}
{p2col:{c |} {bf:{stata macro list _list1 _list2}}}{c |}{p_end}
{p2col:{c |} }{c |}{p_end}
{p2col:{c |} If {cmd:`list'} is defined without the extra set of double quotes, its own first}{c |}{p_end}
{p2col:{c |} and last quotes are removed. This is one of the few situations in which}{c |}{p_end}
{p2col:{c |} enclosing double quotes are required. This is because {cmd:`list'} began with a}{c |}{p_end}
{p2col:{c |} double quote. However, while not always required, the extra double quotes}{c |}{p_end}
{p2col:{c |} are always allowed.}{c |}{p_end}
{pstd}{c BLC}{hline 78}{c BRC}{p_end}
{p2colreset}{...}

{pstd}There are more advanced ways to use macros. For example:

{p2colset 5 84 0 0}{...}
{pstd}{c TLC}{hline 78}{c TRC}{p_end}
{p2col:{c |} {it:It's the first time!} {bf:Try it yourself.}}{c |}{p_end}
{pstd}{c BLC}{hline 78}{c BRC}{p_end}
{p2colreset}{...}
{pstd}{...}{cmd}
local num = 1 * 2 + 3{break}
display "`num'"
{txt}{sf}{ul off}{...}

{pstd}{cmd:local num = 1 * 2 + 3} first evaluates {cmd:1 * 2 + 3},
then stores the result in the local {cmd:`num'}.
Notice the {cmd:=} operator.

{pstd}Compare this with:

{p2colset 5 84 0 0}{...}
{pstd}{c TLC}{hline 78}{c TRC}{p_end}
{p2col:{c |} {it:It's the first time!} {bf:Try it yourself.}}{c |}{p_end}
{pstd}{c BLC}{hline 78}{c BRC}{p_end}
{p2colreset}{...}
{pstd}{...}{cmd}
local num 1 * 2 + 3{break}
display "`num'"
{txt}{sf}{ul off}{...}

{pstd}There's no {cmd:=} operator before the expression, so Stata doesn't evaluate it,
and just stores the string as-is in the local {cmd:`num'}.

{marker counting}{...}
{pstd}A common use of this feature is counting:

{p2colset 5 84 0 0}{...}
{pstd}{c TLC}{hline 78}{c TRC}{p_end}
{p2col:{c |} {it:It's the first time!} {bf:Try it yourself.}}{c |}{p_end}
{pstd}{c BLC}{hline 78}{c BRC}{p_end}
{p2colreset}{...}
{pstd}{...}{cmd}
local i 0{break}
foreach var of varlist _all {{break}
{p_end}{pmore}local i = `i' + 1{break}{p_end}{pstd}
}
{txt}{sf}{ul off}{...}

{pstd}{bf:{stata `"display "The dataset has `i' variables.""'}}{p_end}

{...}
{p2colset 5 84 0 0}{...}
{pstd}{c TLC}{hline 78}{c TRC}{p_end}
{p2col:{c |} {it:Technical Tip!}}{c |}{p_end}
{pstd}{c LT}{hline 78}{c RT}{p_end}
{p2col:{c |} {bf:More on macros}}{c |}{p_end}
{pstd}{c LT}{hline 78}{c RT}{p_end}
{p2col:{c |} If you've never read a {help manuals:Stata manual}, and would never intend to otherwise,}{c |}{p_end}
{p2col:{c |} you should still read {manlink U 18.3 Macros} in the Stata User's Guide. Especially}{c |}{p_end}
{p2col:{c |} if you are an office PA/RA, this section is a must-read about one of the}{c |}{p_end}
{p2col:{c |} most important and powerful tools in Stata: macros.}{c |}{p_end}
{p2col:{c |} }{c |}{p_end}
{p2col:{c |} Afterwards, read more about {help extended_fcn:extended macro functions} and {help macro lists},}{c |}{p_end}
{p2col:{c |} advanced macro features.}{c |}{p_end}
{pstd}{c BLC}{hline 78}{c BRC}{p_end}
{p2colreset}{...}

{hline}{marker loops}

{pstd}{bf:4. More on Loops}

{hline}

{pstd}{cmd:foreach} isn't the only loop or even the only for-loop in
Stata. For instance, {helpb forvalues} loops over certain {it:numlists}, and especially abbreviated as
{cmd:forv} or {cmd:forval}, is easier to type than {view `""SMCL/Concepts/For-Loops and Macros.smcl"##numlist"':foreach of numlist}.
The {helpb while} loop is a more advanced, but useful loop that we'll look at below:

{pstd}Instead of designating text/variables/numbers to substitute within the loop,
{cmd:while} simply sets a condition that must be met for the loop to run.
You are essentially telling Stata that if X is true, it needs to do Y.
The syntax is very simple, as follows:

{pstd}{cmd}{...}
while x = true {
{p_end}{pmore}do Y{p_end}{pstd}
}
{txt}{sf}{ul off}{...}

{pstd}Try this loop (with a local thrown in for good measure) if you feel comfortable
with loops so far – it’s a bit more advanced.

{pstd}{cmd}local i = 1{txt}{p_end}
{pstd}{cmd}while{space 2}`i' < 15 {{txt}{p_end}
{pmore}{cmd}display "Round `i'"{txt}{p_end}
{pmore}{cmd}local i = `i' + 1{txt}{p_end}
{pstd}{cmd}}{txt}{p_end}

{pstd}{stata `"run "Do/Concepts/For-Loops and Macros.do" 9"':Click here to execute.}

{pstd}At the beginning of the loop, `i’ was set to 1.
For the first loop, the {cmd:while} command reads: if 1 < 15,
Stata would display “Round 1”, and then reset `i’ to 2 (one more than it was before).
Since the condition was in fact met, (1 is less than 15), Stata then cycled through the loop 14 times,
making `i’ first 2, then 3, etc, until `i’ hit 15.
Then, once the condition imposed on the {cmd:while} loop was no longer true
(15 is not less than 15), Stata stopped performing the operation and the loop was ended.


{hline}

{pstd}Problem Set: {view `""SMCL/Problem sets/Concepts/For-Loops and Macros - problem set.smcl""':For-Loops and Macros}{break}

{pstd}Next: {view `""SMCL/Concepts/if.smcl""':The {bf:if} Command Versus the {bf:if} Qualifier}{break}
Previous: {view `""SMCL/Concepts/Explicit Subscripting.smcl""':Explicit Subscripting}{break}
{view `""Stata 103.smcl""':Stata 103 Start}{break}
